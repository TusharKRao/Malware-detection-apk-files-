import csv
import sys
import random
import math

dataset = list()
split_ratio = float(sys.argv[2])


#run syntax
#python Naive_Bayes_Classifier.py  <filename you wanna read from> <split_ratio>
filename = sys.argv[1]


##this function is best refined one for reading purposes with regard to our dataset
def loadCsv(filename):
	lines = csv.reader(open(filename, "rb"))
	dataset = list(lines)
	for data in dataset:
		data.pop()
	dataset.pop(0)
	for i in range(0,len(dataset)):
		for j in range(0,len(dataset[i])):
			dataset[i][j] = float(dataset[i][j])
			if dataset[i][j] == -1.0:
				dataset[i][j] = 0
	return dataset
dataset = loadCsv(filename)
print dataset

def splitDataset(dataset, splitRatio):
	trainSize = int(len(dataset) * splitRatio)
	trainSet = []
	copy = list(dataset)
	while len(trainSet) < trainSize:
		index = random.randrange(len(copy))
		trainSet.append(copy.pop(index))
	return [trainSet, copy]

trainSet, testSet = splitDataset(dataset,split_ratio)
#the test set gets smaller with an increase in split_ratio
#print split_ratio
#print len(testSet)


def separateByClass(dataset):
	separated = {}
	for i in range(len(dataset)):
		vector = dataset[i]
		if (vector[-1] not in separated):
			separated[vector[-1]] = []
		separated[vector[-1]].append(vector)
	return separated

separated = separateByClass(dataset)
#print len(dataset[1])

def mean(numbers):
	return sum(numbers)/float(len(numbers))

def std_dev(numbers):
	avg = mean(numbers)
	variance = sum([pow(x-avg,2) for x in numbers])/float(len(numbers)-1)
	return math.sqrt(variance)

def summarize(dataset):
	summaries = [(mean(attribute), std_dev(attribute)) for attribute in zip(*dataset)]
	del summaries[-1]
	return summaries

summary = summarize(dataset)
#print len(summary)

def summarizeByClass(dataset):
	separated = separateByClass(dataset)
	summaries = {}
	for classValue, instances in separated.iteritems():
		summaries[classValue] = summarize(instances)
	return summaries


summary_c = summarizeByClass(dataset)
print summary_c



#######################$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$#################################
def calculateProbability(x, mean, stdev):
	
#prob = calculateProbability(71.5,73,6.2)
#print prob

def calculateClassProbabilities(summaries, inputVector):
	probabilities = {}
	for classValue, classSummaries in summaries.iteritems():
		probabilities[classValue] = 1
		for i in range(len(classSummaries)):
			mean, stdev = classSummaries[i]
			x = inputVector[i]
			print x
			probabilities[classValue] *= calculateProbability(x, mean, stdev)
	return probabilities

inputVector = [1.1,1.1]
#probabilities = calculateClassProbabilities(summary_c , inputVector)
#print probabilities

def predict(summaries, inputVector):
	probabilities = calc_prob(summaries, inputVector)
	bestLabel, bestProb = None, -1
	for classValue, probability in probabilities.iteritems():
		if bestLabel is None or probability > bestProb:
			bestProb = probability
			bestLabel = classValue
	return bestLabel


def getPredictions(summaries, testSet):
	predictions = []
	for i in range(len(testSet)):
		result = predict(summaries, testSet[i])
		predictions.append(result)
	return predictions


def getAccuracy(testSet, predictions):
	correct = 0
	for i in range(len(testSet)):
		if testSet[i][-1] == predictions[i]:
			correct += 1
	return (correct/float(len(testSet))) * 100.0
