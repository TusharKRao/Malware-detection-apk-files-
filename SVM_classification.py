import csv, os
import sys
from csv import reader
import numpy as np
from sklearn import svm
from sklearn.model_selection import KFold, cross_val_score

#run syntax 
#python SVM_classification.py <Final_set.txt>  /home/tushar/Documents/IAS/tester <Final_set.txt>
directory_name = sys.argv[2]
path_list = list()
Final_path = sys.argv[3]
number_apps = 0
True_results = list()				#holds actual classs labels of the apks, used to calculate final accuracy

def Compute_True(path):
	#35th character holds the index whether its malicious or benign
	#print path[34]
	if (path[34] == 'b'):
		True_results.append(1)
	else:
		True_results.append(-1)

def load_csv(filename):
	dataset = list()
	with open(filename, 'r') as file:
		csv_reader = reader(file)
		for row in csv_reader:
			if not row:
				continue
			dataset.append(row)
	return dataset

def pop_padding(dataset):
	for data in dataset:
		data.pop()
	return dataset

def str_column_to_float(dataset, column):
	for row in dataset:
		row[column] = float(row[column].strip())

filename = sys.argv[1]
dataset = load_csv(filename)
#print dataset[0]
dataset = pop_padding(dataset)

#SVM classifier module is here
def SVM_Classifier(dataset):	
	X = np.array(dataset)
	X = np.delete(X, np.s_[0:1], axis=0)#REMOVING THE 1ST ROW x axis

 	y = X[:,[len(X[0]) - 1]] #this line works, uncomment it when you acually run it on a proper dataset
	print y

	X = np.delete(X,np.s_[len(X[0])-1:len(X[0])],axis=1)#REMOVING THE LABEL COLUMN y axis
	#X = np.delete(X,np.s_[0:1],axis=1) #REMOVING THE APP NAMES


	X_new = np.array(X).astype(np.float)
	#print len(y)
	#print len(y[0])
	y = np.array(y).astype(np.float)
	#print len(X_new)
	#print len(X_new[0])

	model = svm.SVC()

	model.fit(X_new, y)
	results = model.predict(X_new)

	kfold = KFold(n_splits=10)
	accuracy_array = [model.fit(X_new[train], y[train]).score(X_new[test], y[test])
	for train, test in kfold.split(X_new)]
	sum = 0
	for value in accuracy_array:
		print value
		sum = sum + value

	accuracy = (float(sum) / len(accuracy_array)) * 100
	print "accuracy", accuracy
	print " ^ accuracy using training data as test " 
	return model, y

#works till here
#


model, y = SVM_Classifier(dataset)

def obtainPaths(directory_name):
	path_list_temp = os.listdir(directory_name)
	for path in path_list_temp:
		temp = directory_name + '/' + path + '/AndroidManifest.txt'
		path_list.append(temp)	
	number_apps = len(path_list)
	return path_list

path_list = obtainPaths(directory_name)
#print len(path_list)

def obtainAppPermissions(path):
	app_perm = list()
	Compute_True(path)
	with open(path,'r') as f:
		app_perm = f.readlines()
	#remove whitespace characters like `\n` at the end of each line
	app_perm = [x.strip() for x in app_perm] 
	return app_perm

def read_set_for_all_permissions():

	with open(Final_path , "r") as file_out:
		reader = csv.reader(file_out)
		dataset = list(reader)
	#print len(dataset[1])

	#removes last element from dataset(padding bit)
	for data in dataset:
		data.pop()
		#data.pop()
		#data.pop()
	#print dataset[1]
 	return dataset[0]

all_permissions = read_set_for_all_permissions()				#uncomment this


#print all_permissions
#print all_permissions
# print len(all_permissions)
# print " ^ length of all all_permissions"


def Test_construct(path_list):
	Test_set = list()
	for path in path_list:
		app_perm = obtainAppPermissions(path)
		for app in app_perm:
			f_v = list()
			for i in range(len(all_permissions)):
				if app == all_permissions[i]:
					f_v.append(1)
					#print "yay"
				else:
					f_v.append(-1)
		Test_set.append(f_v)
	return Test_set



Test_set = Test_construct(path_list)							#uncomment this
#print True_results



#print Test_set
#print len(Test_set)
#print len(Test_set[0])
#model is the model we made aand test_set is the set on which we are testing the accuracy
def Accuracy_Tester(model,dataset, y):
	X = np.array(dataset)
	# print len(X)
	y = X[:,[len(X[0])-1]]
	# for i in range(len(y)):
	# 	for j in range(len(y[i])):
	# 		y[i][j] = 1
	# # print y
	X = np.delete(X,np.s_[len(X[0])-1:len(X[0])],axis=1)#REMOVING THE LABEL COLUMN y axis

	X_new = np.array(X).astype(np.float)
	#######################################################	
	results = model.predict(X_new)
	#print results
	#print len(results)
	# for value in accuracy_array:
	# 	print value
	# 	sum = sum + value

	#accuracy = (float(sum) / len(accuracy_array)) * 100
	# print "accuracy", accuracy
	pos = 0
	for i in range(len(results)):
		if results[i] == float(True_results[i]):
	 		pos += 1
	print (str(float(pos) * 100 / float(len(results))) + "% is the accuracy obtained for the given test apks")


Accuracy_Tester(model,Test_set, y)										#uncomment this too