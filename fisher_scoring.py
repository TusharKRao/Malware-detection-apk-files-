from xml.dom.minidom import parseString
import xlsxwriter , csv
import sys , string
import re , operator
import glob , os , math


#running syntax
#
# python fisher_scoring.py <RAW> 

fisher_score = [0] * 50000  #have length of features ie len(data[i])
n_pos = [0] * 50000
n_neg = [0] * 50000
x_i_avg = [0] * 50000
x_i_avg_neg = [0] * 50000
x_i_avg_pos = [0] * 50000
num = 0
denominator = [0] * 50000
numerator = [0] * 50000

def read_data():
	with open(sys.argv[1] , "r") as f:
		reader = csv.reader(f)
		data = list(reader)
		return data
	
#sys.argv[1] is the command line argument where you pass the number of applications you want to score with
def fisher_score_setup(data):
	for j in range(0,len(data[1])-2):
		for i in range(1,len(data)):
			if float(data[i][j]) == 1:
				x_i_avg_pos[j] = x_i_avg_pos[j] + float(data[i][j])
				x_i_avg[j] = x_i_avg[j] + float(data[i][j])
				n_pos[j] = n_pos[j] + 1
			else:
				x_i_avg_neg[j] = x_i_avg_neg[j] + float(data[i][j])
				x_i_avg[j] = x_i_avg[j] + float(data[i][j])
				n_neg[j] = n_neg[j] + 1
		num = n_neg[j] + n_pos[j]
		if(n_pos[j] == 0):
			x_i_avg_pos[j] = 0
		else:
			x_i_avg_pos[j] = x_i_avg_pos[j] / n_pos[j]
		x_i_avg_neg[j] = x_i_avg_neg[j] / n_neg[j]
		x_i_avg[j] = x_i_avg[j] / num
		numerator[j] = pow((x_i_avg_pos[j] - x_i_avg[j]),2) + pow((x_i_avg_neg[j] - x_i_avg[j]),2)

	##NUMERATOR IS MADE ALONG WITH THE LIST FOR THE REQUIRED ENTITIES

	#calculating the denominator
	for j in range(0,len(data[1]) - 1):   #each jth feature iteration
		sum_pos_1 = 0
		sum_pos_2 = 0
		for i in range(1,len(data)):
			if(data[i][j] == 1):
				sum_pos_1 = sum_pos_1 + pow((float(data[i][j]) - x_i_avg_pos[j]) , 2)
			else:
				sum_pos_2 = sum_pos_2 + pow((float(data[i][j]) - x_i_avg_neg[j]) , 2)
			#the subparts in the denominator have been calculated
		if((n_pos[j] - 1) == 0):
			sum_pos_1 = sum_pos_1 / (n_pos[j])
		else:
			sum_pos_1 = sum_pos_1 / (n_pos[j] - 1)
		sum_pos_2 = sum_pos_2 / (n_neg[j] - 1)
		denominator[j] = sum_pos_2 + sum_pos_1


def score(data):	
	for j in range(0,len(data[1]) - 1):
		if(denominator[j] == 0):
			fisher_score[j] = float(-1)
		else:
			fisher_score[j] = numerator[j] / denominator[j]
		#print str(numerator[j]) + " / " + str(denominator[j])

	#for i in range(0 , len(data[1])-1):
		#print fisher_score[i]
	#print (len(data[1]) - 1)
	
	#print len(fisher_score)



def write_into_set(data,filename):
	samplist = list()
	for i in range(0,len(data[1]) - 1):
		samplist.append(str(fisher_score[i]))

	#print samplist
	with open(filename,"a") as f:
		f.writelines("\n")
		for sam in samplist:
			f.write(sam)
			f.write(",")
		

		


data = read_data()
#print len(data)
#print len(data[1])
fisher_score_setup(data)
score(data)
### dataset is made in the raw form and further alterations made by running the above module will cause dataset to fail
write_into_set(data,sys.argv[1])


#sum = 0
#for j in range(1,len(data)):
#	sum = sum + 1
#print sum
#print len(data)
#print len(data[1])
#print data[1][len(data[2]) - 2]